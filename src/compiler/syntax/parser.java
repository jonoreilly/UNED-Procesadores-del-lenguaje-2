
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 18 14:20:07 CEST 2024
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;
import compiler.utils.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 18 14:20:07 CEST 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\057\002\000\002\002" +
    "\004\000\002\010\002\000\002\060\002\000\002\003\006" +
    "\000\002\004\004\000\002\004\003\000\002\016\004\000" +
    "\002\016\003\000\002\017\006\000\002\020\004\000\002" +
    "\020\003\000\002\021\011\000\002\022\003\000\002\022" +
    "\003\000\002\023\004\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\025\004\000\002\026\004\000" +
    "\002\026\003\000\002\027\004\000\002\006\003\000\002" +
    "\006\004\000\002\011\004\000\002\011\003\000\002\061" +
    "\002\000\002\062\002\000\002\012\014\000\002\012\012" +
    "\000\002\005\004\000\002\005\005\000\002\013\003\000" +
    "\002\013\003\000\002\014\003\000\002\014\005\000\002" +
    "\015\004\000\002\015\004\000\002\007\012\000\002\007" +
    "\013\000\002\030\003\000\002\030\003\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\004\000" +
    "\002\030\004\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\003\000\002\030\003\000\002\031" +
    "\006\000\002\032\006\000\002\032\005\000\002\052\003" +
    "\000\002\052\005\000\002\063\002\000\002\033\006\000" +
    "\002\034\004\000\002\034\003\000\002\035\004\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\056\004\000\002\056\005\000\002" +
    "\037\005\000\002\040\006\000\002\041\003\000\002\041" +
    "\003\000\002\042\006\000\002\043\011\000\002\043\007" +
    "\000\002\044\012\000\002\045\004\000\002\045\003\000" +
    "\002\046\010\000\002\047\007\000\002\047\003\000\002" +
    "\064\002\000\002\050\010\000\002\051\004\000\002\053" +
    "\007\000\002\053\007\000\002\054\003\000\002\054\003" +
    "\000\002\055\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\014\027\000\031\000\043\000\044\000\045" +
    "\000\001\002\000\004\002\326\001\002\000\014\027\ufffd" +
    "\031\ufffd\043\ufffd\044\ufffd\045\ufffd\001\002\000\004\002" +
    "\uffff\001\002\000\014\027\010\031\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\001\002\000\004\045\323\001\002\000\014\027" +
    "\010\031\ufffe\043\ufffe\044\ufffe\045\ufffe\001\002\000\012" +
    "\031\ufffe\043\016\044\ufffe\045\ufffe\001\002\000\012\031" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\001\002\000\010\031\036" +
    "\044\034\045\041\001\002\000\030\012\ufffe\031\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\040\ufffe\041\ufffe\043\016" +
    "\044\ufffe\045\ufffe\001\002\000\004\031\020\001\002\000" +
    "\026\012\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\040\ufff5\041\ufff5\044\ufff5\045\ufff5\001\002\000\004\045" +
    "\021\001\002\000\004\010\022\001\002\000\006\045\024" +
    "\046\023\001\002\000\004\011\ufff3\001\002\000\004\011" +
    "\ufff2\001\002\000\004\011\026\001\002\000\004\016\027" +
    "\001\002\000\030\012\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\001\002\000\026\012\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\ufffa\001\002\000" +
    "\006\031\320\044\034\001\002\000\006\037\275\045\274" +
    "\001\002\000\010\031\036\044\034\045\041\001\002\000" +
    "\004\045\057\001\002\000\026\012\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0\044\ufff0\045" +
    "\ufff0\001\002\000\004\002\uffe6\001\002\000\004\045\043" +
    "\001\002\000\004\016\055\001\002\000\010\016\ufffe\017" +
    "\ufffe\024\052\001\002\000\006\016\ufffe\017\046\001\002" +
    "\000\004\016\uffed\001\002\000\004\045\043\001\002\000" +
    "\004\016\uffeb\001\002\000\004\016\uffec\001\002\000\006" +
    "\016\uffea\017\uffea\001\002\000\004\046\054\001\002\000" +
    "\006\016\uffe9\017\uffe9\001\002\000\006\016\uffe8\017\uffe8" +
    "\001\002\000\026\012\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\040\uffee\041\uffee\044\uffee\045\uffee\001\002" +
    "\000\004\016\272\001\002\000\012\014\060\016\ufffe\017" +
    "\ufffe\024\052\001\002\000\010\015\ufffe\031\066\045\061" +
    "\001\002\000\004\045\271\001\002\000\006\015\uffdd\017" +
    "\267\001\002\000\004\015\070\001\002\000\004\015\uffdf" +
    "\001\002\000\004\015\uffde\001\002\000\004\045\067\001" +
    "\002\000\006\015\uffdb\017\uffdb\001\002\000\004\012\071" +
    "\001\002\000\026\012\ufffe\031\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\035\ufffe\040\ufffe\041\ufffe\043\016\045\ufffe\001\002" +
    "\000\024\012\073\031\117\032\110\033\111\034\102\035" +
    "\120\040\075\041\113\045\115\001\002\000\024\012\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\040\uffc6\041" +
    "\uffc6\045\uffc6\001\002\000\026\012\uffbb\013\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\040\uffbb\041\uffbb\042\uffbb\045" +
    "\uffbb\001\002\000\014\014\134\016\256\021\143\045\144" +
    "\046\137\001\002\000\026\012\uffbc\013\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\040\uffbc\041\uffbc\042\uffbc\045\uffbc" +
    "\001\002\000\024\012\073\031\117\032\110\033\111\034" +
    "\102\035\120\040\075\041\113\045\115\001\002\000\006" +
    "\023\uffb1\024\uffb1\001\002\000\026\012\uffbe\013\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\045\uffbe\001\002\000\004\014\226\001\002\000\004\016" +
    "\225\001\002\000\006\023\217\024\220\001\002\000\026" +
    "\012\uffb7\013\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\045\uffb7\001\002\000\026\012\uffbf" +
    "\013\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\045\uffbf\001\002\000\024\012\uffc1\013\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\040\uffc1\041\uffc1\045" +
    "\uffc1\001\002\000\004\014\211\001\002\000\004\014\203" +
    "\001\002\000\026\012\uffb8\013\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\040\uffb8\041\uffb8\042\uffb8\045\uffb8\001\002" +
    "\000\004\014\175\001\002\000\026\012\uffb9\013\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\045\uffb9\001\002\000\016\005\132\010\130\014\131\023" +
    "\uffb2\024\uffb2\045\043\001\002\000\026\012\uffba\013\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\040\uffba\041\uffba\042" +
    "\uffba\045\uffba\001\002\000\004\045\043\001\002\000\004" +
    "\014\170\001\002\000\006\031\uffe2\044\uffe2\001\002\000" +
    "\026\012\uffbd\013\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\045\uffbd\001\002\000\026\012" +
    "\uffc0\013\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\045\uffc0\001\002\000\024\012\073\013" +
    "\127\032\110\033\111\034\102\035\120\040\075\041\113" +
    "\045\126\001\002\000\024\012\uffc2\013\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\040\uffc2\041\uffc2\045\uffc2\001\002" +
    "\000\014\005\132\010\130\014\131\023\uffb2\024\uffb2\001" +
    "\002\000\006\031\uffe1\044\uffe1\001\002\000\012\014\134" +
    "\021\143\045\144\046\137\001\002\000\014\014\134\015" +
    "\136\021\143\045\144\046\137\001\002\000\004\016\133" +
    "\001\002\000\026\012\uffb4\013\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\040\uffb4\041\uffb4\042\uffb4\045\uffb4\001\002" +
    "\000\012\014\134\021\143\045\144\046\137\001\002\000" +
    "\026\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\022\uffcd\025\uffcd\001\002\000\026\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\022\uffc9\025\uffc9\001\002\000\026\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\011\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\022\uffd7\025\uffd7\001\002\000\022\004\147\005\153\006" +
    "\146\007\152\015\uffc8\017\162\022\150\025\151\001\002" +
    "\000\026\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\022\uffcc\025\uffcc\001\002\000\004" +
    "\015\161\001\002\000\012\014\134\021\143\045\144\046" +
    "\137\001\002\000\032\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\130\011\uffd6\014\131\015\uffd6\016\uffd6\017\uffd6\022" +
    "\uffd6\025\uffd6\001\002\000\026\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\011\uffd1\015\uffd1\016\uffd1\017\uffd1\022\uffd1\025" +
    "\uffd1\001\002\000\012\014\134\021\143\045\144\046\137" +
    "\001\002\000\012\014\134\021\143\045\144\046\137\001" +
    "\002\000\012\014\134\021\143\045\144\046\137\001\002" +
    "\000\012\014\134\021\143\045\144\046\137\001\002\000" +
    "\012\014\134\021\143\045\144\046\137\001\002\000\026" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\022\uffd2\025\uffd2\001\002\000\026\004\147" +
    "\005\153\006\146\007\uffce\011\uffce\015\uffce\016\uffce\017" +
    "\uffce\022\150\025\151\001\002\000\026\004\147\005\153" +
    "\006\146\007\uffd0\011\uffd0\015\uffd0\016\uffd0\017\uffd0\022" +
    "\uffd0\025\uffd0\001\002\000\026\004\147\005\153\006\146" +
    "\007\uffcf\011\uffcf\015\uffcf\016\uffcf\017\uffcf\022\uffcf\025" +
    "\151\001\002\000\026\004\uffd4\005\153\006\146\007\uffd4" +
    "\011\uffd4\015\uffd4\016\uffd4\017\uffd4\022\uffd4\025\uffd4\001" +
    "\002\000\026\004\uffd3\005\153\006\uffd3\007\uffd3\011\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\022\uffd3\025\uffd3\001\002\000" +
    "\026\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca\015\uffca" +
    "\016\uffca\017\uffca\022\uffca\025\uffca\001\002\000\012\014" +
    "\134\021\143\045\144\046\137\001\002\000\004\015\uffc7" +
    "\001\002\000\020\004\147\005\153\006\146\007\152\015" +
    "\165\022\150\025\151\001\002\000\026\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\015\uffd5\016\uffd5\017\uffd5\022" +
    "\uffd5\025\uffd5\001\002\000\020\004\147\005\153\006\146" +
    "\007\152\011\167\022\150\025\151\001\002\000\032\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\001\002\000" +
    "\012\014\134\021\143\045\144\046\137\001\002\000\020" +
    "\004\147\005\153\006\146\007\152\015\172\022\150\025" +
    "\151\001\002\000\022\012\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\040\uffa7\041\uffa7\045\uffa7\001\002\000\022\012" +
    "\073\032\110\033\111\034\102\035\120\040\075\041\113" +
    "\045\126\001\002\000\026\012\uffa6\013\uffa6\032\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\040\uffa6\041\uffa6\042\uffa6\045\uffa6" +
    "\001\002\000\012\014\134\021\143\045\144\046\137\001" +
    "\002\000\020\004\147\005\153\006\146\007\152\015\177" +
    "\022\150\025\151\001\002\000\022\012\073\032\110\033" +
    "\111\034\102\035\120\040\075\041\113\045\126\001\002" +
    "\000\026\012\uffae\013\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\040\uffae\041\uffae\042\201\045\uffae\001\002\000\022" +
    "\012\073\032\110\033\111\034\102\035\120\040\075\041" +
    "\113\045\126\001\002\000\026\012\uffaf\013\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\040\uffaf\041\uffaf\042\uffaf\045" +
    "\uffaf\001\002\000\014\014\134\015\ufffe\021\143\045\144" +
    "\046\137\001\002\000\004\015\207\001\002\000\020\004" +
    "\147\005\153\006\146\007\152\015\uff9f\022\150\025\151" +
    "\001\002\000\004\015\uffa0\001\002\000\004\016\210\001" +
    "\002\000\026\012\uffa3\013\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\040\uffa3\041\uffa3\042\uffa3\045\uffa3\001\002\000" +
    "\006\015\ufffe\047\213\001\002\000\004\015\215\001\002" +
    "\000\004\015\uffa1\001\002\000\004\015\uffa2\001\002\000" +
    "\004\016\216\001\002\000\026\012\uffa4\013\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\040\uffa4\041\uffa4\042\uffa4\045" +
    "\uffa4\001\002\000\012\014\134\021\143\045\144\046\137" +
    "\001\002\000\012\014\134\021\143\045\144\046\137\001" +
    "\002\000\020\004\147\005\153\006\146\007\152\016\222" +
    "\022\150\025\151\001\002\000\026\012\uffb3\013\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\045\uffb3\001\002\000\020\004\147\005\153\006\146\007" +
    "\152\016\224\022\150\025\151\001\002\000\026\012\uffb0" +
    "\013\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\045\uffb0\001\002\000\026\012\uffa5\013\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\045\uffa5\001\002\000\012\014\134\021\143\045\144" +
    "\046\137\001\002\000\020\004\147\005\153\006\146\007" +
    "\152\015\230\022\150\025\151\001\002\000\004\012\231" +
    "\001\002\000\004\026\234\001\002\000\010\013\ufffe\026" +
    "\234\036\243\001\002\000\010\013\uffab\026\uffab\036\uffab" +
    "\001\002\000\004\046\235\001\002\000\004\020\236\001" +
    "\002\000\004\012\073\001\002\000\004\030\240\001\002" +
    "\000\004\016\241\001\002\000\010\013\uffaa\026\uffaa\036" +
    "\uffaa\001\002\000\004\013\252\001\002\000\004\020\246" +
    "\001\002\000\010\013\uffac\026\uffac\036\uffac\001\002\000" +
    "\004\013\uffa8\001\002\000\004\012\073\001\002\000\004" +
    "\030\250\001\002\000\004\016\251\001\002\000\004\013" +
    "\uffa9\001\002\000\026\012\uffad\013\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\040\uffad\041\uffad\042\uffad\045\uffad\001" +
    "\002\000\026\012\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\040\ufff1\041\ufff1\044\ufff1\045\ufff1\001\002\000" +
    "\024\012\073\013\255\032\110\033\111\034\102\035\120" +
    "\040\075\041\113\045\126\001\002\000\006\031\uffe0\044" +
    "\uffe0\001\002\000\026\012\uffb6\013\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\040\uffb6\041\uffb6\042\uffb6\045\uffb6\001" +
    "\002\000\020\004\147\005\153\006\146\007\152\016\260" +
    "\022\150\025\151\001\002\000\026\012\uffb5\013\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\045\uffb5\001\002\000\024\012\073\031\117\032\110\033" +
    "\111\034\102\035\120\040\075\041\113\045\115\001\002" +
    "\000\024\012\073\031\117\032\110\033\111\034\102\035" +
    "\120\040\075\041\113\045\115\001\002\000\004\013\265" +
    "\001\002\000\024\012\073\013\uffc3\032\110\033\111\034" +
    "\102\035\120\040\075\041\113\045\126\001\002\000\030" +
    "\012\uffc5\013\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\045\uffc5\001\002\000\024" +
    "\012\073\013\uffc4\032\110\033\111\034\102\035\120\040" +
    "\075\041\113\045\126\001\002\000\006\031\066\045\061" +
    "\001\002\000\004\015\uffdc\001\002\000\006\015\uffda\017" +
    "\uffda\001\002\000\026\012\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\040\uffef\041\uffef\044\uffef\045\uffef\001" +
    "\002\000\004\002\ufffb\001\002\000\004\014\307\001\002" +
    "\000\004\014\276\001\002\000\004\015\277\001\002\000" +
    "\004\012\300\001\002\000\026\012\ufffe\031\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\035\ufffe\040\ufffe\041\ufffe\043\016\045" +
    "\ufffe\001\002\000\024\012\073\031\117\032\110\033\111" +
    "\034\102\035\120\040\075\041\113\045\115\001\002\000" +
    "\024\012\073\031\117\032\110\033\111\034\102\035\120" +
    "\040\075\041\113\045\115\001\002\000\024\012\073\013" +
    "\304\032\110\033\111\034\102\035\120\040\075\041\113" +
    "\045\126\001\002\000\004\002\uffd9\001\002\000\024\012" +
    "\073\013\306\032\110\033\111\034\102\035\120\040\075" +
    "\041\113\045\126\001\002\000\004\002\uffd8\001\002\000" +
    "\010\015\uffe5\031\uffe5\045\uffe5\001\002\000\010\015\ufffe" +
    "\031\066\045\061\001\002\000\004\015\312\001\002\000" +
    "\004\012\313\001\002\000\026\012\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\040\uffe4\041\uffe4\043\uffe4\045" +
    "\uffe4\001\002\000\026\012\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\040\ufffe\041\ufffe\043\016\045\ufffe\001" +
    "\002\000\024\012\073\031\117\032\110\033\111\034\102" +
    "\035\120\040\075\041\113\045\115\001\002\000\006\031" +
    "\uffe3\044\uffe3\001\002\000\004\002\uffe7\001\002\000\004" +
    "\045\321\001\002\000\004\014\060\001\002\000\012\031" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\001\002\000\004\046\324" +
    "\001\002\000\004\016\325\001\002\000\014\027\ufff7\031" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\002\003\057\004\001\001\000\002\001" +
    "\001\000\006\003\005\060\006\001\001\000\002\001\001" +
    "\000\010\010\012\016\011\017\010\001\001\000\002\001" +
    "\001\000\010\010\012\016\321\017\010\001\001\000\010" +
    "\010\016\020\013\021\014\001\001\000\002\001\001\000" +
    "\016\004\030\007\037\011\031\012\032\023\034\024\036" +
    "\001\001\000\010\010\016\020\027\021\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\037\011\316\012\032\001\001\000\002" +
    "\001\001\000\012\007\037\011\272\012\032\024\252\001" +
    "\001\000\006\025\055\027\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\041\027\043\001\001\000" +
    "\002\001\001\000\006\006\050\010\052\001\001\000\006" +
    "\010\046\026\044\001\001\000\002\001\001\000\006\025" +
    "\047\027\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\050\010\052\001\001\000\012\010\064\013\062\014" +
    "\063\015\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\016\020\071\021\014\001\001\000\046\005\120\023" +
    "\076\024\036\031\077\032\102\033\104\035\123\036\106" +
    "\037\105\040\100\041\103\042\121\043\075\044\073\050" +
    "\115\051\113\053\111\056\122\001\001\000\004\063\260" +
    "\001\001\000\002\001\001\000\010\030\256\031\134\032" +
    "\140\001\001\000\002\001\001\000\042\024\252\031\077" +
    "\032\102\033\104\035\253\036\106\037\105\040\100\041" +
    "\103\042\121\043\075\044\073\050\115\051\113\053\111" +
    "\056\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\041\027\043\001\001\000" +
    "\002\001\001\000\006\025\055\027\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\031\077\032\102\033\104\036\124\037\105" +
    "\040\100\041\103\042\121\043\075\044\073\050\115\051" +
    "\113\053\111\056\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\165\031\134\032" +
    "\140\001\001\000\012\030\137\031\134\032\140\052\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\163\031\134\032\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\144\031\134\032\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\157\031\134\032\140\001\001\000\010\030\156\031\134" +
    "\032\140\001\001\000\010\030\155\031\134\032\140\001" +
    "\001\000\010\030\154\031\134\032\140\001\001\000\010" +
    "\030\153\031\134\032\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\030" +
    "\137\031\134\032\140\052\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\170\031\134\032\140\001\001" +
    "\000\002\001\001\000\004\064\172\001\001\000\036\031" +
    "\077\032\102\033\104\036\173\037\105\040\100\041\103" +
    "\042\121\043\075\044\073\050\115\051\113\053\111\056" +
    "\122\001\001\000\002\001\001\000\010\030\175\031\134" +
    "\032\140\001\001\000\002\001\001\000\036\031\077\032" +
    "\102\033\104\036\177\037\105\040\100\041\103\042\121" +
    "\043\075\044\073\050\115\051\113\053\111\056\122\001" +
    "\001\000\002\001\001\000\036\031\077\032\102\033\104" +
    "\036\201\037\105\040\100\041\103\042\121\043\075\044" +
    "\073\050\115\051\113\053\111\056\122\001\001\000\002" +
    "\001\001\000\014\010\205\030\204\031\134\032\140\055" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\213\054\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\222\031\134\032\140\001\001\000\010\030\220" +
    "\031\134\032\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\226\031\134\032\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\231\046\232\001\001" +
    "\000\010\010\244\046\243\047\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\031\077\032\102\033\104\036" +
    "\124\037\105\040\100\041\103\042\121\043\075\044\073" +
    "\050\115\051\113\053\111\056\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\023\261\024\036\031\077\032\102\033\104\034" +
    "\262\035\263\036\106\037\105\040\100\041\103\042\121" +
    "\043\075\044\073\050\115\051\113\053\111\056\122\001" +
    "\001\000\042\024\252\031\077\032\102\033\104\035\265" +
    "\036\106\037\105\040\100\041\103\042\121\043\075\044" +
    "\073\050\115\051\113\053\111\056\122\001\001\000\002" +
    "\001\001\000\036\031\077\032\102\033\104\036\124\037" +
    "\105\040\100\041\103\042\121\043\075\044\073\050\115" +
    "\051\113\053\111\056\122\001\001\000\002\001\001\000" +
    "\036\031\077\032\102\033\104\036\124\037\105\040\100" +
    "\041\103\042\121\043\075\044\073\050\115\051\113\053" +
    "\111\056\122\001\001\000\006\014\267\015\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\016\020\300\021" +
    "\014\001\001\000\044\023\301\024\036\031\077\032\102" +
    "\033\104\035\302\036\106\037\105\040\100\041\103\042" +
    "\121\043\075\044\073\050\115\051\113\053\111\056\122" +
    "\001\001\000\042\024\252\031\077\032\102\033\104\035" +
    "\304\036\106\037\105\040\100\041\103\042\121\043\075" +
    "\044\073\050\115\051\113\053\111\056\122\001\001\000" +
    "\036\031\077\032\102\033\104\036\124\037\105\040\100" +
    "\041\103\042\121\043\075\044\073\050\115\051\113\053" +
    "\111\056\122\001\001\000\002\001\001\000\036\031\077" +
    "\032\102\033\104\036\124\037\105\040\100\041\103\042" +
    "\121\043\075\044\073\050\115\051\113\053\111\056\122" +
    "\001\001\000\002\001\001\000\004\061\307\001\001\000" +
    "\012\010\064\013\310\014\063\015\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\313\001\001\000" +
    "\010\010\016\020\314\021\014\001\001\000\046\005\315" +
    "\023\076\024\036\031\077\032\102\033\104\035\123\036" +
    "\106\037\105\040\100\041\103\042\121\043\075\044\073" +
    "\050\115\051\113\053\111\056\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opcionesEscribeEnt ::= expresion 
            {
              OpcionesEscribeEnt RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
				RESULT = OpcionesEscribeEnt.produccion_expresion(expresion);
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opcionesEscribeEnt ::= epsilon 
            {
              OpcionesEscribeEnt RESULT =null;
		int epsilonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsilonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Epsilon epsilon = (Epsilon)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
				RESULT = OpcionesEscribeEnt.produccion_epsilon(epsilon);
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opcionesEscribe ::= STRING 
            {
              OpcionesEscribe RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token string = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = OpcionesEscribe.produccion_STRING(string);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opcionesEscribe ::= epsilon 
            {
              OpcionesEscribe RESULT =null;
		int epsilonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsilonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Epsilon epsilon = (Epsilon)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = OpcionesEscribe.produccion_epsilon(epsilon);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentenciaSalida ::= ESCRIBE_ENT OPEN_KEY opcionesEscribeEnt CLOSE_KEY SEMI_COLON 
            {
              SentenciaSalida RESULT =null;
		int escribeEntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int escribeEntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token escribeEnt = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opcionesEscribeEntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opcionesEscribeEntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OpcionesEscribeEnt opcionesEscribeEnt = (OpcionesEscribeEnt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
				RESULT = SentenciaSalida.produccion_ESCRIBE_ENT_OPEN_KEY_opcionesEscribeEnt_CLOSE_KEY_SEMI_COLON(escribeEnt, openKey, opcionesEscribeEnt, closeKey, semiColon);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciaSalida ::= ESCRIBE OPEN_KEY opcionesEscribe CLOSE_KEY SEMI_COLON 
            {
              SentenciaSalida RESULT =null;
		int escribeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int escriberight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token escribe = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opcionesEscribeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opcionesEscriberight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OpcionesEscribe opcionesEscribe = (OpcionesEscribe)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
				RESULT = SentenciaSalida.produccion_ESCRIBE_OPEN_KEY_opcionesEscribe_CLOSE_KEY_SEMI_COLON(escribe, openKey, opcionesEscribe, closeKey, semiColon);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentenciaLlamadaFuncion ::= llamadaFuncion SEMI_COLON 
            {
              SentenciaLlamadaFuncion RESULT =null;
		int llamadaFuncionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llamadaFuncionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LlamadaFuncion llamadaFuncion = (LlamadaFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
				RESULT = SentenciaLlamadaFuncion.produccion(llamadaFuncion, semiColon);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaLlamadaFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaMientras ::= MIENTRAS OPEN_KEY expresion CLOSE_KEY NT$5 sentencia 
            {
              SentenciaMientras RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (SentenciaMientras) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token mientras = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
				RESULT = SentenciaMientras.produccion(mientras, openKey, expresion, closeKey, sentencia);
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$5 ::= 
            {
              SentenciaMientras RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token mientras = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;


				SentenciaMientras.preProduccion(mientras, openKey, expresion, closeKey);			
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // porDefecto ::= epsilon 
            {
              PorDefecto RESULT =null;
		int epsilonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsilonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Epsilon epsilon = (Epsilon)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = PorDefecto.produccion_epsilon(epsilon);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // porDefecto ::= PORDEFECTO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              PorDefecto RESULT =null;
		int pordefectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pordefectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token pordefecto = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int twoPointsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int twoPointsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token twoPoints = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int corteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int corteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token corte = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
				RESULT = PorDefecto.produccion_PORDEFECTO_TWO_POINTS_bloque_CORTE_SEMI_COLON(pordefecto, twoPoints, bloque, corte, semiColon);
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // casoAlt ::= CASO NUMERO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              CasoAlt RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token caso = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int twoPointsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int twoPointsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token twoPoints = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int corteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int corteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token corte = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = CasoAlt.produccion(caso, numero, twoPoints, bloque, corte, semiColon);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // casosAlternativa ::= casoAlt 
            {
              CasosAlternativa RESULT =null;
		int casoAltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoAltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoAlt casoAlt = (CasoAlt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = CasosAlternativa.produccion_casoAlt(casoAlt);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // casosAlternativa ::= casosAlternativa casoAlt 
            {
              CasosAlternativa RESULT =null;
		int casosAlternativaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casosAlternativaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CasosAlternativa casosAlternativa = (CasosAlternativa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casoAltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoAltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoAlt casoAlt = (CasoAlt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
				RESULT = CasosAlternativa.produccion_casosAlternativa_casoAlt(casosAlternativa, casoAlt);
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaAlternativas ::= ALTENATIVAS OPEN_KEY expresion CLOSE_KEY OPEN_PARENTHESIS casosAlternativa porDefecto CLOSE_PARENTHESIS 
            {
              SentenciaAlternativas RESULT =null;
		int alternativasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int alternativasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token alternativas = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int openParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token openParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int casosAlternativaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int casosAlternativaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CasosAlternativa casosAlternativa = (CasosAlternativa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int porDefectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int porDefectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PorDefecto porDefecto = (PorDefecto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				
				RESULT = SentenciaAlternativas.produccion(alternativas, openKey, expresion, closeKey, openParenthesis, casosAlternativa, porDefecto, closeParenthesis);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              SentenciaSi RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token si = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentenciaSileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaSiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentenciaSi = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 
				RESULT = SentenciaSi.produccion_SI_OPEN_KEY_expresion_CLOSE_KEY_sentencia(si, openKey, expresion, closeKey, sentenciaSi);	
					
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia SINO sentencia 
            {
              SentenciaSi RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token si = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentenciaSileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sentenciaSiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sentencia sentenciaSi = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token sino = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentenciaSinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaSinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentenciaSino = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					
				RESULT = SentenciaSi.produccion_SI_OPEN_KEY_expresion_CLOSE_KEY_sentencia_SINO_sentencia(si, openKey, expresion, closeKey, sentenciaSi, sino, sentenciaSino);	
					
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaAsignacionSuma ::= ref ASSIGN_SUMA expresion SEMI_COLON 
            {
              SentenciaAsignacionSuma RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ref ref = (Ref)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int assignSumaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int assignSumaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token assignSuma = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = SentenciaAsignacionSuma.produccion(ref, assignSuma, expresion, semiColon);
					
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionSuma",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ref ::= accesoVector 
            {
              Ref RESULT =null;
		int accesoVectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int accesoVectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccesoVector accesoVector = (AccesoVector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = Ref.produccion_accesoVector(accesoVector);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ref ::= IDENTIFICADOR 
            {
              Ref RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = Ref.produccion_IDENTIFICADOR(identificador);
					
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciaAsignacion ::= ref ASSIGN expresion SEMI_COLON 
            {
              SentenciaAsignacion RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ref ref = (Ref)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token assign = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = SentenciaAsignacion.produccion(ref, assign, expresion, semiColon);
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciaIncremento ::= IDENTIFICADOR AUTO_INCREMENTO SEMI_COLON 
            {
              SentenciaIncremento RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int autoIncrementoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int autoIncrementoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token autoIncremento = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = SentenciaIncremento.produccion(identificador, autoIncremento, semiColon);

			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIncremento",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciaDevuelve ::= DEVUELVE expresion SEMI_COLON 
            {
              SentenciaDevuelve RESULT =null;
		int devuelveleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int devuelveright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token devuelve = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = SentenciaDevuelve.produccion_DEVUELVE_expresion_SEMI_COLON(devuelve, expresion, semiColon);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciaDevuelve ::= DEVUELVE SEMI_COLON 
            {
              SentenciaDevuelve RESULT =null;
		int devuelveleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int devuelveright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token devuelve = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = SentenciaDevuelve.produccion_DEVUELVE_SEMI_COLON(devuelve, semiColon);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= bloque 
            {
              Sentencia RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			
				RESULT = Sentencia.produccion_bloque(bloque); 
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= sentenciaSalida 
            {
              Sentencia RESULT =null;
		int sentenciaSalidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaSalidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaSalida sentenciaSalida = (SentenciaSalida)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			
				RESULT = Sentencia.produccion_sentenciaSalida(sentenciaSalida); 
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Sentencia RESULT =null;
		int sentenciaLlamadaFuncionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaLlamadaFuncionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaLlamadaFuncion sentenciaLlamadaFuncion = (SentenciaLlamadaFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			
				RESULT = Sentencia.produccion_sentenciaLlamadaFuncion(sentenciaLlamadaFuncion); 
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= sentenciaMientras 
            {
              Sentencia RESULT =null;
		int sentenciaMientrasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaMientrasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaMientras sentenciaMientras = (SentenciaMientras)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			
				RESULT = Sentencia.produccion_sentenciaMientras(sentenciaMientras);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= sentenciaAlternativas 
            {
              Sentencia RESULT =null;
		int sentenciaAlternativasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaAlternativasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaAlternativas sentenciaAlternativas = (SentenciaAlternativas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			
				RESULT = Sentencia.produccion_sentenciaAlternativas(sentenciaAlternativas);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= sentenciaSi 
            {
              Sentencia RESULT =null;
		int sentenciaSileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaSiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaSi sentenciaSi = (SentenciaSi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				
				RESULT = Sentencia.produccion_sentenciaSi(sentenciaSi); 
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= sentenciaAsignacionSuma 
            {
              Sentencia RESULT =null;
		int sentenciaAsignacionSumaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaAsignacionSumaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaAsignacionSuma sentenciaAsignacionSuma = (SentenciaAsignacionSuma)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				
				RESULT = Sentencia.produccion_sentenciaAsignacionSuma(sentenciaAsignacionSuma); 
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= sentenciaAsignacion 
            {
              Sentencia RESULT =null;
		int sentenciaAsignacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaAsignacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaAsignacion sentenciaAsignacion = (SentenciaAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = Sentencia.produccion_sentenciaAsignacion(sentenciaAsignacion); 
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= sentenciaIncremento 
            {
              Sentencia RESULT =null;
		int sentenciaIncrementoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaIncrementoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaIncremento sentenciaIncremento = (SentenciaIncremento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		
				RESULT = Sentencia.produccion_sentenciaIncremento(sentenciaIncremento); 
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= sentenciaDevuelve 
            {
              Sentencia RESULT =null;
		int sentenciaDevuelveleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaDevuelveright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaDevuelve sentenciaDevuelve = (SentenciaDevuelve)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

				RESULT = Sentencia.produccion_sentenciaDevuelve(sentenciaDevuelve); 
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listadoSentencias ::= sentencia 
            {
              ListadoSentencias RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		 		RESULT = ListadoSentencias.produccion_sentencia(sentencia);
		 				 
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listadoSentencias ::= listadoSentencias sentencia 
            {
              ListadoSentencias RESULT =null;
		int listadoSentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listadoSentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListadoSentencias listadoSentencias = (ListadoSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
				RESULT = ListadoSentencias.produccion_listadoSentencias_sentencia(listadoSentencias, sentencia);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenidoBloque ::= listadoSentencias 
            {
              ContenidoBloque RESULT =null;
		int listadoSentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listadoSentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListadoSentencias listadoSentencias = (ListadoSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	
				RESULT = ContenidoBloque.produccion_listadoSentencias(listadoSentencias);
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenidoBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contenidoBloque ::= seccionVariables listadoSentencias 
            {
              ContenidoBloque RESULT =null;
		int seccionVariablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seccionVariablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SeccionVariables seccionVariables = (SeccionVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listadoSentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listadoSentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListadoSentencias listadoSentencias = (ListadoSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	
				RESULT = ContenidoBloque.produccion_seccionVariables_listadoSentencias(seccionVariables, listadoSentencias);
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenidoBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque ::= OPEN_PARENTHESIS NT$4 contenidoBloque CLOSE_PARENTHESIS 
            {
              Bloque RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Bloque) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int openParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token openParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int contenidoBloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contenidoBloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ContenidoBloque contenidoBloque = (ContenidoBloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						
				RESULT = Bloque.produccion(openParenthesis, contenidoBloque, closeParenthesis);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$4 ::= 
            {
              Bloque RESULT =null;
		int openParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int openParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token openParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			
				Bloque.preProduccion(openParenthesis);
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametros ::= expresion COLON parametros 
            {
              Parametros RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token colon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametros parametros = (Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						
				RESULT = Parametros.produccion_expresion_COLON_parametros(expresion, colon, parametros);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros ::= expresion 
            {
              Parametros RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = Parametros.produccion_expresion(expresion);

			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY CLOSE_KEY 
            {
              LlamadaFuncion RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = LlamadaFuncion.produccion_IDENTIFICADOR_OPEN_KEY_CLOSE_KEY(identificador, openKey, closeKey);
							
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY parametros CLOSE_KEY 
            {
              LlamadaFuncion RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parametros parametros = (Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = LlamadaFuncion.produccion_IDENTIFICADOR_OPEN_KEY_parametros_CLOSE_KEY(identificador, openKey, parametros, closeKey);
						
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // accesoVector ::= IDENTIFICADOR OPEN_BRACKET expresion CLOSE_BRACKET 
            {
              AccesoVector RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int openBracketleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int openBracketright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token openBracket = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeBracketleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeBracketright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeBracket = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
				RESULT = AccesoVector.produccion(identificador, openBracket, expresion, closeBracket);
				
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= llamadaFuncion 
            {
              Expresion RESULT =null;
		int llamadaFuncionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llamadaFuncionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LlamadaFuncion llamadaFuncion = (LlamadaFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 	
		 		RESULT = Expresion.produccion_llamadaFuncion(llamadaFuncion);
		 	
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= accesoVector 
            {
              Expresion RESULT =null;
		int accesoVectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int accesoVectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccesoVector accesoVector = (AccesoVector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 	
		 		RESULT = Expresion.produccion_accesoVector(accesoVector);
		 	
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion AND_LOGICA expresion 
            {
              Expresion RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresion1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andLogicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andLogicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token andLogica = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 				
				RESULT = Expresion.produccion_expresion_AND_LOGICA_expresion(expresion1, andLogica, expresion2);
				 		
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion EQUAL expresion 
            {
              Expresion RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresion1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int equalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int equalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token equal = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 	 		
				RESULT = Expresion.produccion_expresion_EQUAL_expresion(expresion1, equal, expresion2);
						
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion LOWER_THAN expresion 
            {
              Expresion RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresion1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lowerThanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lowerThanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token lowerThan = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 	 		
				RESULT = Expresion.produccion_expresion_LOWER_THAN_expresion(expresion1, lowerThan, expresion2);
				
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= NEGACION expresion 
            {
              Expresion RESULT =null;
		int negacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int negacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token negacion = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 		
				RESULT = Expresion.produccion_NEGACION_expresion(negacion, expresion);
				
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion AUTO_INCREMENTO 
            {
              Expresion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int autoIncrementoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int autoIncrementoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token autoIncremento = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 		
		 		RESULT = Expresion.produccion_expresion_AUTO_INCREMENTO(expresion, autoIncremento);
				
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion MULT expresion 
            {
              Expresion RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresion1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token mult = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = Expresion.produccion_expresion_MULT_expresion(expresion1, mult, expresion2);
				 		
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion PLUS expresion 
            {
              Expresion RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion expresion1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token plus = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 		
				RESULT = Expresion.produccion_expresion_PLUS_expresion(expresion1, plus, expresion2);
			 		
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= OPEN_KEY expresion CLOSE_KEY 
            {
              Expresion RESULT =null;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = Expresion.produccion_OPEN_KEY_expresion_CLOSE_KEY(openKey, expresion, closeKey);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	
		 		RESULT = Expresion.produccion_IDENTIFICADOR(identificador);
			 	
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= NUMERO 
            {
              Expresion RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	
				RESULT = Expresion.produccion_NUMERO(numero);
		
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS seccionTipos seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              FuncionPrincipal RESULT =null;
		int vacioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vacioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token vacio = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int openParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int openParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token openParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int seccionTiposleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int seccionTiposright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SeccionTipos seccionTipos = (SeccionTipos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int seccionVariablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seccionVariablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeccionVariables seccionVariables = (SeccionVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listadoSentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listadoSentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListadoSentencias listadoSentencias = (ListadoSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		
				String lexema = vacio.getLexema() + " principal" + openKey.getLexema() + closeKey.getLexema() + " " + openParenthesis.getLexema() + "\n" + seccionTipos.getLexema() + "\n" + seccionVariables.getLexema() + "\n" + listadoSentencias.getLexema() + "\n" + closeParenthesis.getLexema();
		
				Consola.log("funcionPrincipal[2]: \n" + lexema);
		
				RESULT = new FuncionPrincipal(lexema);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS seccionTipos listadoSentencias CLOSE_PARENTHESIS 
            {
              FuncionPrincipal RESULT =null;
		int vacioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vacioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token vacio = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int openParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token openParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int seccionTiposleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seccionTiposright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeccionTipos seccionTipos = (SeccionTipos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listadoSentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listadoSentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListadoSentencias listadoSentencias = (ListadoSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

				String lexema = vacio.getLexema() + " principal" + openKey.getLexema() + closeKey.getLexema() + " " + openParenthesis.getLexema() + "\n" + seccionTipos.getLexema() + "\n" + listadoSentencias.getLexema() + "\n" + closeParenthesis.getLexema();
		
				Consola.log("funcionPrincipal[1]: \n" + lexema);
				
				RESULT = new FuncionPrincipal(lexema);
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametro ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int identificador1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificador1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identificador1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identificador2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificador2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							
				RESULT = Parametro.produccion_IDENTIFICADOR_IDENTIFICADOR(identificador1, identificador2);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametro ::= ENTERO IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
				RESULT = Parametro.produccion_ENTERO_IDENTIFICADOR(entero, identificador);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionParametros ::= parametro COLON declaracionParametros 
            {
              DeclaracionParametros RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro parametro = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token colon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionParametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionParametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionParametros declaracionParametros = (DeclaracionParametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = DeclaracionParametros.produccion_parametro_COLON_declaracionParametros(parametro, colon, declaracionParametros);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionParametros ::= parametro 
            {
              DeclaracionParametros RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro parametro = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = DeclaracionParametros.produccion_parametro(parametro);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // seccionParametros ::= epsilon 
            {
              SeccionParametros RESULT =null;
		int epsilonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsilonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Epsilon epsilon = (Epsilon)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = SeccionParametros.produccion_epsilon(epsilon);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // seccionParametros ::= declaracionParametros 
            {
              SeccionParametros RESULT =null;
		int declaracionParametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionParametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionParametros declaracionParametros = (DeclaracionParametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = SeccionParametros.produccion_declaracionParametros(declaracionParametros);
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion1 ::= seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion1 RESULT =null;
		int seccionVariablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seccionVariablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeccionVariables seccionVariables = (SeccionVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listadoSentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listadoSentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListadoSentencias listadoSentencias = (ListadoSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
				RESULT = Funcion1.produccion_seccionVariables_listadoSentencias_CLOSE_PARENTHESIS(seccionVariables, listadoSentencias, closeParenthesis);
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion1 ::= listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion1 RESULT =null;
		int listadoSentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listadoSentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListadoSentencias listadoSentencias = (ListadoSentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int closeParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int closeParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token closeParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = Funcion1.produccion_listadoSentencias_CLOSE_PARENTHESIS(listadoSentencias, closeParenthesis);
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion ::= ENTERO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS seccionTipos funcion1 
            {
              Funcion RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int seccionParametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int seccionParametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SeccionParametros seccionParametros = (SeccionParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int openParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int openParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token openParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int seccionTiposleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seccionTiposright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SeccionTipos seccionTipos = (SeccionTipos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion1 funcion1 = (Funcion1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
				String lexema = entero.getLexema() + " " + id.getLexema() + openKey.getLexema() + seccionParametros.getLexema() + closeKey.getLexema() + " " + openParenthesis.getLexema() + "\n" + seccionTipos.getLexema() + "\n" + funcion1.getLexema();
            	
            	Consola.log("funcion[4]: \n" + lexema);
            	
				TypeIF tipoEntero = scopeManager.searchType("entero");
				
				// TODO
				
				RESULT = new Funcion(lexema); 
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion ::= VACIO IDENTIFICADOR OPEN_KEY NT$2 seccionParametros CLOSE_KEY OPEN_PARENTHESIS NT$3 seccionTipos funcion1 
            {
              Funcion RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Funcion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vacioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int vacioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token vacio = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int seccionParametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int seccionParametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SeccionParametros seccionParametros = (SeccionParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int openParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token openParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int seccionTiposleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seccionTiposright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SeccionTipos seccionTipos = (SeccionTipos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion1 funcion1 = (Funcion1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				String lexema = vacio.getLexema() + " " + id.getLexema() + openKey.getLexema() + seccionParametros.getLexema() + closeKey.getLexema() + " " + openParenthesis.getLexema() + "\n" + seccionTipos.getLexema() + "\n" + funcion1.getLexema();
            	
            	Consola.log("funcion[3]: \n" + lexema);
            	
				scopeManager.closeScope();
				
				ScopeIF scope = scopeManager.getCurrentScope();

				SymbolTableIF symbolTable = scope.getSymbolTable();

				TypeIF tipoVacio = scopeManager.searchType("vacio");
	
				TypeIF tipoDevuelve = funcion1.getTipoDevuelve();
				
				String nombreFuncion = id.getLexema();
	
				// Comprobar que el tipo de retorno de la funcion es igual que el tipo devuelto por las sentencias
				if (!tipoVacio.equals(tipoDevuelve)) {
				
					semanticErrorManager.semanticFatalError("Error, el tipo de retorno no coincide con el tipo de la funcion: " + nombreFuncion);
				
				} 
				
				RESULT = new Funcion(lexema);
					
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Funcion RESULT =(Funcion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vacioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vacioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token vacio = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int seccionParametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seccionParametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SeccionParametros seccionParametros = (SeccionParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int closeKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int closeKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token closeKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int openParenthesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int openParenthesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token openParenthesis = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			
				String lexema = vacio.getLexema() + " " + id.getLexema() + openKey.getLexema() + seccionParametros.getLexema() + closeKey.getLexema() + " " + openParenthesis.getLexema();
            	
            	Consola.log("funcion[2]: \n" + lexema);
            	
				scopeManager.openScope();
				
				ScopeIF scope = scopeManager.getCurrentScope();

				SymbolTableIF symbolTable = scope.getSymbolTable();
				
				List<ParametroDatos> parametros = seccionParametros.getParametros();
				
				for (ParametroDatos parametro : parametros) {
				
					String nombreParametro = parametro.getNombre();
					
					TypeIF tipoParametro = parametro.getTipo();
					
            		Consola.log("Parametro funcion " + id.getLexema() + ": " + tipoParametro.getName() + " " + nombreParametro);
					
					// Comprobar que no hay otro parametro con el mismo nombre
					if (symbolTable.containsSymbol(nombreParametro)) {
					
						semanticErrorManager.semanticFatalError("Error, ya existe otro parametro con este nombre: " + nombreParametro);
				
					}
										
					// TODO: comprobar que el tipo del parametro es aceptable (entero, array)
					
					symbolTable.addSymbol(nombreParametro, new SymbolParameter(scope, nombreParametro, tipoParametro));
				
				}
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Funcion RESULT =null;
		int vacioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vacioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token vacio = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int openKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int openKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token openKey = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;


				String lexema = vacio.getLexema() + " " + id.getLexema() + openKey.getLexema();

            	Consola.log("funcion[1]: \n" + lexema);

				ScopeIF scope = scopeManager.getCurrentScope();

				SymbolTableIF symbolTable = scope.getSymbolTable();
				
				String nombreFuncion = id.getLexema();
				
				// Comprobar que no hay otra variable con este nombre en el ambito actual
				if (symbolTable.containsSymbol(nombreFuncion)) {
				
					semanticErrorManager.semanticFatalError("Error, ya existe otra variable con este nombre: " + nombreFuncion);
				
				}				

			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // seccionFunciones ::= funcionPrincipal 
            {
              SeccionFunciones RESULT =null;
		int funcionPrincipalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcionPrincipalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncionPrincipal funcionPrincipal = (FuncionPrincipal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		    
				RESULT = SeccionFunciones.produccion_funcionPrincipal(funcionPrincipal);
	
	    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seccionFunciones ::= funcion seccionFunciones 
            {
              SeccionFunciones RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seccionFuncionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seccionFuncionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeccionFunciones seccionFunciones = (SeccionFunciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

				RESULT = SeccionFunciones.produccion_funcion_seccionFunciones(funcion, seccionFunciones); 
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id1 ::= ASSIGN NUMERO 
            {
              Id1 RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token assign = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	        
	        	RESULT = Id1.produccion_ASSIGN_NUMERO(assign, numero);
	        		
	    	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id1 ::= epsilon 
            {
              Id1 RESULT =null;
		int epsilonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsilonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Epsilon epsilon = (Epsilon)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		
				RESULT = Id1.produccion_epsilon(epsilon); 
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // id ::= IDENTIFICADOR id1 
            {
              Id RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id1 id1 = (Id1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = Id.produccion(identificador, id1);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listadoIDs1 ::= epsilon 
            {
              ListadoIDs1 RESULT =null;
		int epsilonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsilonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Epsilon epsilon = (Epsilon)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
	        	RESULT = ListadoIDs1.produccion_epsilon(epsilon);
	          
	      	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listadoIDs1 ::= COLON listadoIDs 
            {
              ListadoIDs1 RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token colon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listadoIDsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listadoIDsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListadoIDs listadoIDs = (ListadoIDs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = ListadoIDs1.produccion_COLON_listadoIDs(colon, listadoIDs);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listadoIDs ::= id listadoIDs1 
            {
              ListadoIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listadoIDs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listadoIDs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListadoIDs1 listadoIDs1 = (ListadoIDs1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = ListadoIDs.produccion(id, listadoIDs1);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVariable ::= IDENTIFICADOR listadoIDs SEMI_COLON 
            {
              DeclaracionVariable RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listadoIDsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listadoIDsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListadoIDs listadoIDs = (ListadoIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				
				RESULT = DeclaracionVariable.produccion_IDENTIFICADOR_listadoIDs_SEMI_COLON(identificador, listadoIDs, semiColon);
							
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVariable ::= ENTERO listadoIDs SEMI_COLON 
            {
              DeclaracionVariable RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listadoIDsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listadoIDsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListadoIDs listadoIDs = (ListadoIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				
				RESULT = DeclaracionVariable.produccion_ENTERO_listadoIDs_SEMI_COLON(entero, listadoIDs, semiColon);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seccionVariables ::= declaracionVariable 
            {
              SeccionVariables RESULT =null;
		int declaracionVariableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionVariableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionVariable declaracionVariable = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				
				RESULT = SeccionVariables.produccion_declaracionVariable(declaracionVariable);
	       				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              SeccionVariables RESULT =null;
		int seccionVariablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seccionVariablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SeccionVariables seccionVariables = (SeccionVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionVariableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionVariableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionVariable declaracionVariable = (DeclaracionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				
				RESULT = SeccionVariables.produccion_seccionVariables_declaracionVariable(seccionVariables, declaracionVariable);
	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tamTipo ::= IDENTIFICADOR 
            {
              TamTipo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = TamTipo.produccion_IDENTIFICADOR(identificador);
			 				
 			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tamTipo ::= NUMERO 
            {
              TamTipo RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				
				RESULT = TamTipo.produccion_NUMERO(numero);

 			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionTipo ::= TIPO ENTERO IDENTIFICADOR OPEN_BRACKET tamTipo CLOSE_BRACKET SEMI_COLON 
            {
              DeclaracionTipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int openBracketleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openBracketright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token openBracket = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tamTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TamTipo tamTipo = (TamTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int closeBracketleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int closeBracketright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token closeBracket = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

				RESULT = DeclaracionTipo.produccion(tipo, entero, identificador, openBracket, tamTipo, closeBracket, semiColon);
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionTipos ::= epsilon 
            {
              SeccionTipos RESULT =null;
		int epsilonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsilonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Epsilon epsilon = (Epsilon)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				
				RESULT = SeccionTipos.produccion_epsilon(epsilon);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionTipos ::= declaracionTipo seccionTipos 
            {
              SeccionTipos RESULT =null;
		int declaracionTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declaracionTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionTipo declaracionTipo = (DeclaracionTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seccionTiposleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seccionTiposright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeccionTipos seccionTipos = (SeccionTipos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					
				RESULT = SeccionTipos.produccion_declaracionTipo_seccionTipos(declaracionTipo, seccionTipos);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionConstante ::= CONSTANTE IDENTIFICADOR NUMERO SEMI_COLON 
            {
              DeclaracionConstante RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token constante = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semiColonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiColonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token semiColon = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
				RESULT = DeclaracionConstante.produccion(constante, identificador, numero, semiColon);
							
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccionConstantes ::= epsilon 
            {
              SeccionConstantes RESULT =null;
		int epsilonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsilonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Epsilon epsilon = (Epsilon)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            
				RESULT = SeccionConstantes.produccion_epsilon(epsilon);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccionConstantes ::= declaracionConstante seccionConstantes 
            {
              SeccionConstantes RESULT =null;
		int declaracionConstanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declaracionConstanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionConstante declaracionConstante = (DeclaracionConstante)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seccionConstantesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seccionConstantesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeccionConstantes seccionConstantes = (SeccionConstantes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			
				RESULT = SeccionConstantes.produccion_declaracionConstante_seccionConstantes(declaracionConstante, seccionConstantes);
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // axiom1 ::= seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom1 ::= seccionVariables seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= NT$1 seccionConstantes seccionTipos axiom1 
            {
              Axiom RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Axiom) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				
				scopeManager.closeScope();
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Axiom RESULT =null;

		
				scopeManager.openScope();
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // epsilon ::= 
            {
              Epsilon RESULT =null;
		 RESULT = new Epsilon(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  
		scopeManager.closeScope();
			
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores se puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  		
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
  
		Contexto.init(syntaxErrorManager, semanticErrorManager, scopeManager, finalCodeFactory);	
  
        syntaxErrorManager.syntaxInfo("Starting parsing..."); 
        
        scopeManager.openScope("global");
        
        ScopeIF scope = scopeManager.getCurrentScope();
		
		TypeTableIF typeTable = scope.getTypeTable();
		
		typeTable.addType("entero", new TypeSimple(scope, "entero"));
		
		typeTable.addType("vacio", new TypeSimple(scope, "vacio"));
		
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

