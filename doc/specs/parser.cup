package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

import compiler.utils.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	
:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaracion de terminales


terminal Token PLUS;
terminal Token AUTO_INCREMENTO;
terminal Token MULT;
terminal Token AND_LOGICA;
terminal Token OPEN_BRACKET;
terminal Token CLOSE_BRACKET;
terminal Token OPEN_PARENTHESIS;
terminal Token CLOSE_PARENTHESIS;
terminal Token OPEN_KEY;
terminal Token CLOSE_KEY;
terminal Token SEMI_COLON;
terminal Token COLON;
terminal Token TWO_POINTS;
terminal Token NEGACION;
terminal Token EQUAL;
terminal Token ASSIGN_SUMA;
terminal Token ASSIGN;
terminal Token LOWER_THAN;
terminal Token CASO;
terminal Token CONSTANTE;
terminal Token CORTE;
terminal Token ENTERO;
terminal Token ESCRIBE;
terminal Token ESCRIBE_ENT;
terminal Token ALTENATIVAS;
terminal Token MIENTRAS;
terminal Token PORDEFECTO;
terminal Token principal;
terminal Token DEVUELVE;
terminal Token SI;
terminal Token SINO;
terminal Token TIPO;
terminal Token VACIO;
terminal Token IDENTIFICADOR;
terminal Token NUMERO;
terminal Token STRING;


// Declaracion de no terminales

non terminal Program					program;
non terminal Axiom						axiom;
non terminal Axiom1						axiom1;
non terminal Funcion1					funcion1;
non terminal Id1						id1;
non terminal FuncionPrincipal			funcionPrincipal;
non terminal BloqueFuncionPrincipal		bloqueFuncionPrincipal;
non terminal Epsilon					epsilon;
non terminal SeccionFunciones			seccionFunciones;
non terminal Funcion					funcion;
non terminal TipoFuncion				tipoFuncion;
non terminal SeccionParametros			seccionParametros;
non terminal DeclaracionParametros		declaracionParametros;
non terminal Parametro					parametro;
non terminal SeccionConstantes			seccionConstantes;
non terminal DeclaracionConstante		declaracionConstante;
non terminal SeccionTipos				seccionTipos;
non terminal DeclaracionTipo			declaracionTipo;
non terminal TamTipo					tamTipo;
non terminal SeccionVariables			seccionVariables;
non terminal DeclaracionVariable		declaracionVariable;
non terminal ListadoIDs					listadoIDs;
non terminal ListadoIDs1				listadoIDs1;
non terminal Id							id;
non terminal Expresion					expresion;
non terminal Referencia					referencia;
non terminal AccesoVector				accesoVector;
non terminal LlamadaFuncion				llamadaFuncion;
non terminal Bloque						bloque;
non terminal ContenidoBloque			contenidoBloque;
non terminal ListadoSentencias			listadoSentencias;
non terminal Sentencia					sentencia;
non terminal SentenciaIncremento		sentenciaIncremento;
non terminal SentenciaAsignacion		sentenciaAsignacion;
non terminal Ref						ref;
non terminal SentenciaAsignacionSuma	sentenciaAsignacionSuma;
non terminal SentenciaSi				sentenciaSi;
non terminal SentenciaAlternativas		sentenciaAlternativas;
non terminal CasosAlternativa			casosAlternativa;
non terminal CasoAlt					casoAlt; 
non terminal PorDefecto					porDefecto;
non terminal SentenciaMientras			sentenciaMientras;
non terminal SentenciaLlamadaFuncion	sentenciaLlamadaFuncion;
non terminal Parametros					parametros;
non terminal SentenciaSalida			sentenciaSalida;
non terminal OpcionesEscribe			opcionesEscribe;
non terminal OpcionesEscribeEnt			opcionesEscribeEnt;
non terminal SentenciaDevuelve			sentenciaDevuelve;

// Declaracion de relaciones de precedencia
precedence left     AND_LOGICA;
precedence left		EQUAL;
precedence left		LOWER_THAN;
precedence left		PLUS;
precedence left		MULT;
precedence left		AUTO_INCREMENTO, NEGACION;
precedence right	OPEN_BRACKET, CLOSE_BRACKET;
precedence left 	OPEN_KEY, CLOSE_KEY;
precedence nonassoc SINO;
precedence nonassoc SI;
            

// Declaracion de reglas de produccion


start with program;

program ::= 
  {: 
  
		Contexto.init(syntaxErrorManager, semanticErrorManager, scopeManager, finalCodeFactory);	
  
        syntaxErrorManager.syntaxInfo("Starting parsing..."); 
        
        scopeManager.openScope("global");
        
        ScopeIF scope = scopeManager.getCurrentScope();
		
		TypeTableIF typeTable = scope.getTypeTable();
		
		typeTable.addType("entero", new TypeSimple(scope, "entero"));
		
		typeTable.addType("vacio", new TypeSimple(scope, "vacio"));
		
  :}
  axiom:ax
  {:   		
  
		scopeManager.closeScope();
			
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		List<QuadrupleIF> intermediateCode = ax.getIntermediateCode();
  		
  		intermediateCode.addAll(Contexto.listaCadenas.getIntermediateCode());
  		
  		// TODO: REMOVE DEBUG
  		for (QuadrupleIF q : intermediateCode) {
  			semanticErrorManager.semanticInfo(q.toString());
  		}
  		
  		// finalCodeFactory.create(intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores se puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo("Parsing process ended.");
  		
   :};


epsilon ::= {: RESULT = new Epsilon(); :};


axiom ::= seccionConstantes:seccionConstantes seccionTipos:seccionTipos axiom1:axiom1 {:
				
				RESULT = Axiom.produccion(seccionConstantes, seccionTipos, axiom1);
			
			:};

axiom1 ::= seccionVariables:seccionVariables seccionFunciones:seccionFunciones {:

				RESULT = Axiom1.produccion_seccionVariables_seccionFunciones(seccionVariables, seccionFunciones);

			:}
			| seccionFunciones:seccionFunciones {:
			
				RESULT = Axiom1.produccion_seccionFunciones(seccionFunciones);
			
			:};

seccionConstantes ::= declaracionConstante:declaracionConstante seccionConstantes:seccionConstantes {: 
			
				RESULT = SeccionConstantes.produccion_declaracionConstante_seccionConstantes(declaracionConstante, seccionConstantes);
			
			:}
          	| epsilon:epsilon {: 
            
				RESULT = SeccionConstantes.produccion_epsilon(epsilon);
			
			:};
                      
                      
declaracionConstante ::= CONSTANTE:constante IDENTIFICADOR:identificador NUMERO:numero SEMI_COLON:semiColon {:
			
				RESULT = DeclaracionConstante.produccion(constante, identificador, numero, semiColon);
							
			:};

seccionTipos ::= declaracionTipo:declaracionTipo seccionTipos:seccionTipos {:
					
				RESULT = SeccionTipos.produccion_declaracionTipo_seccionTipos(declaracionTipo, seccionTipos);
			
			:}
          	| epsilon:epsilon {: 
				
				RESULT = SeccionTipos.produccion_epsilon(epsilon);
			
			:};
                      
declaracionTipo ::= TIPO:tipo ENTERO:entero IDENTIFICADOR:identificador OPEN_BRACKET:openBracket tamTipo:tamTipo CLOSE_BRACKET:closeBracket SEMI_COLON:semiColon {:

				RESULT = DeclaracionTipo.produccion(tipo, entero, identificador, openBracket, tamTipo, closeBracket, semiColon);
				
			:};

tamTipo ::= NUMERO:numero {:
				
				RESULT = TamTipo.produccion_NUMERO(numero);

 			:} 
 			| IDENTIFICADOR:identificador {:

				RESULT = TamTipo.produccion_IDENTIFICADOR(identificador);
			 				
 			:};
 		
seccionVariables ::= seccionVariables:seccionVariables declaracionVariable:declaracionVariable {:
				
				RESULT = SeccionVariables.produccion_seccionVariables_declaracionVariable(seccionVariables, declaracionVariable);
	
			:} 
			| declaracionVariable:declaracionVariable {:
				
				RESULT = SeccionVariables.produccion_declaracionVariable(declaracionVariable);
	       				
			:};

declaracionVariable ::= ENTERO:entero listadoIDs:listadoIDs SEMI_COLON:semiColon {:
				
				RESULT = DeclaracionVariable.produccion_ENTERO_listadoIDs_SEMI_COLON(entero, listadoIDs, semiColon);
				
			:}
          	| IDENTIFICADOR:identificador listadoIDs:listadoIDs SEMI_COLON:semiColon {:
				
				RESULT = DeclaracionVariable.produccion_IDENTIFICADOR_listadoIDs_SEMI_COLON(identificador, listadoIDs, semiColon);
							
			:};
                      
listadoIDs ::= id:id listadoIDs1:listadoIDs1 {:

				RESULT = ListadoIDs.produccion(id, listadoIDs1);
				
			:};

listadoIDs1 ::= COLON:colon listadoIDs:listadoIDs {:

				RESULT = ListadoIDs1.produccion_COLON_listadoIDs(colon, listadoIDs);
				
			:}
	        | epsilon:epsilon {:
	
	        	RESULT = ListadoIDs1.produccion_epsilon(epsilon);
	          
	      	:};

id ::= IDENTIFICADOR:identificador id1:id1 {:

				RESULT = Id.produccion(identificador, id1);
				
			:};

id1 ::= epsilon:epsilon {: 
		
				RESULT = Id1.produccion_epsilon(epsilon); 
				
			:}
	        | ASSIGN:assign NUMERO:numero {: 
	        
	        	RESULT = Id1.produccion_ASSIGN_NUMERO(assign, numero);
	        		
	    	:};

seccionFunciones ::= funcion:funcion seccionFunciones:seccionFunciones {: 

				RESULT = SeccionFunciones.produccion_funcion_seccionFunciones(funcion, seccionFunciones); 
	
			:}
		    | funcionPrincipal:funcionPrincipal {: 
		    
				RESULT = SeccionFunciones.produccion_funcionPrincipal(funcionPrincipal);
	
	    	:};
                          
funcion ::= tipoFuncion:tipoFuncion {:
			
				Funcion.preProduccion_tipoFuncion(tipoFuncion);

			:} seccionParametros:seccionParametros CLOSE_KEY:closeKey OPEN_PARENTHESIS:openParenthesis {:
			
				Funcion.preProduccion_tipoFuncion_seccionParametros_CLOSE_KEY_OPEN_PARENTHESIS(tipoFuncion, seccionParametros, closeKey, openParenthesis);
				
			:} seccionTipos:seccionTipos funcion1:funcion1 {:
				
				RESULT = Funcion.produccion_tipoFuncion_seccionParametros_CLOSE_KEY_OPEN_PARENTHESIS_seccionTipos_funcion1(tipoFuncion, seccionParametros, closeKey, openParenthesis, seccionTipos, funcion1);
					
			:};
                   
                   
tipoFuncion ::= VACIO:vacio IDENTIFICADOR:identificador OPEN_KEY:openKey {:

				RESULT = TipoFuncion.produccion_VACIO_IDENTIFICADOR_OPEN_KEY(vacio, identificador, openKey);

			:} 
			| ENTERO:entero IDENTIFICADOR:identificador OPEN_KEY:openKey {:
			
				RESULT = TipoFuncion.produccion_ENTERO_IDENTIFICADOR_OPEN_KEY(entero, identificador, openKey);
						
			:}; 
         
funcion1 ::= listadoSentencias:listadoSentencias CLOSE_PARENTHESIS:closeParenthesis {:

				RESULT = Funcion1.produccion_listadoSentencias_CLOSE_PARENTHESIS(listadoSentencias, closeParenthesis);
	
			:}
	        | seccionVariables:seccionVariables listadoSentencias:listadoSentencias  CLOSE_PARENTHESIS:closeParenthesis {:
	
				RESULT = Funcion1.produccion_seccionVariables_listadoSentencias_CLOSE_PARENTHESIS(seccionVariables, listadoSentencias, closeParenthesis);
	
			:};



seccionParametros ::= declaracionParametros:declaracionParametros {:

				RESULT = SeccionParametros.produccion_declaracionParametros(declaracionParametros);
	
			:} 
			| epsilon:epsilon {:
			
				RESULT = SeccionParametros.produccion_epsilon(epsilon);
			
			:};

declaracionParametros ::= parametro:parametro {:

				RESULT = DeclaracionParametros.produccion_parametro(parametro);
			
			:} 
			| parametro:parametro COLON:colon declaracionParametros:declaracionParametros {:
			
				RESULT = DeclaracionParametros.produccion_parametro_COLON_declaracionParametros(parametro, colon, declaracionParametros);
			
			:};

parametro ::= ENTERO:entero IDENTIFICADOR:identificador {:
	
				RESULT = Parametro.produccion_ENTERO_IDENTIFICADOR(entero, identificador);
				
			:} 
			| IDENTIFICADOR:identificador1 IDENTIFICADOR:identificador2 {:
							
				RESULT = Parametro.produccion_IDENTIFICADOR_IDENTIFICADOR(identificador1, identificador2);
			
			:};

funcionPrincipal ::= VACIO:vacio principal:principal OPEN_KEY:openKey CLOSE_KEY:closeKey OPEN_PARENTHESIS:openParenthesis {:

				FuncionPrincipal.preProduccion_VACIO_principal_OPEN_KEY_CLOSE_KEY_OPEN_PARENTHESIS(vacio, principal, openKey, closeKey, openParenthesis);

			:} bloqueFuncionPrincipal:bloqueFuncionPrincipal {: 

				RESULT = FuncionPrincipal.produccion_VACIO_principal_OPEN_KEY_CLOSE_KEY_OPEN_PARENTHESIS_bloqueFuncionPrincipal(vacio, principal, openKey, closeKey, openParenthesis, bloqueFuncionPrincipal);
		
			:};
			
bloqueFuncionPrincipal ::= seccionTipos:seccionTipos listadoSentencias:listadoSentencias CLOSE_PARENTHESIS:closeParenthesis {:

				RESULT = BloqueFuncionPrincipal.produccion_seccionTipos_listadoSentencias_CLOSE_PARENTHESIS(seccionTipos, listadoSentencias, closeParenthesis);

			:}
			| seccionTipos:seccionTipos seccionVariables:seccionVariables listadoSentencias:listadoSentencias CLOSE_PARENTHESIS:closeParenthesis {:

				RESULT = BloqueFuncionPrincipal.produccion_seccionTipos_seccionVariables_listadoSentencias_CLOSE_PARENTHESIS(seccionTipos, seccionVariables, listadoSentencias, closeParenthesis);

			:};



// EXPRESIONES

expresion ::= NUMERO:numero {: 
	
				RESULT = Expresion.produccion_NUMERO(numero);
		
			 :} 
			|  OPEN_KEY:openKey expresion:expresion CLOSE_KEY:closeKey {:
			
				RESULT = Expresion.produccion_OPEN_KEY_expresion_CLOSE_KEY(openKey, expresion, closeKey);
			
			:}
		 	|  expresion:expresion1 PLUS:plus expresion:expresion2 {:
			 		
				RESULT = Expresion.produccion_expresion_PLUS_expresion(expresion1, plus, expresion2);
			 		
		 	:}
		 	|  expresion:expresion1 MULT:mult expresion:expresion2 {:
			
				RESULT = Expresion.produccion_expresion_MULT_expresion(expresion1, mult, expresion2);
				 		
		 	:}
		 	|  referencia:referencia AUTO_INCREMENTO:autoIncremento {:
			 		
		 		RESULT = Expresion.produccion_referencia_AUTO_INCREMENTO(referencia, autoIncremento);
				
		 	:}
		 	|  NEGACION:negacion expresion:expresion {:
			 		
				RESULT = Expresion.produccion_NEGACION_expresion(negacion, expresion);
				
		 	:}
		 	|  expresion:expresion1 LOWER_THAN:lowerThan expresion:expresion2 {:
		 	 		
				RESULT = Expresion.produccion_expresion_LOWER_THAN_expresion(expresion1, lowerThan, expresion2);
				
		 	:}
		 	|  expresion:expresion1 EQUAL:equal expresion:expresion2 {:
		 	 		
				RESULT = Expresion.produccion_expresion_EQUAL_expresion(expresion1, equal, expresion2);
						
		 	:}
		 	|  expresion:expresion1 AND_LOGICA:andLogica expresion:expresion2 {:
		 				
				RESULT = Expresion.produccion_expresion_AND_LOGICA_expresion(expresion1, andLogica, expresion2);
				 		
		 	:}
		 	|  llamadaFuncion:llamadaFuncion {:
		 	
		 		RESULT = Expresion.produccion_llamadaFuncion(llamadaFuncion);
		 	
		 	:}
		 	|  referencia:referencia {:
		 	
		 		RESULT = Expresion.produccion_referencia(referencia);
		 	
		 	:};
		 	
referencia ::= accesoVector:accesoVector {:

				RESULT = Referencia.produccion_accesoVector(accesoVector);
	
			:}
			| IDENTIFICADOR:identificador {:
			
				RESULT = Referencia.produccion_IDENTIFICADOR(identificador);
			
			:}
			| OPEN_KEY:openKey referencia:referencia CLOSE_KEY:closeKey {:
			
				RESULT = Referencia.produccion_OPEN_KEY_referencia_CLOSE_KEY(openKey, referencia, closeKey);
			
			:};

accesoVector ::= IDENTIFICADOR:identificador OPEN_BRACKET:openBracket expresion:expresion CLOSE_BRACKET:closeBracket {:
		
				RESULT = AccesoVector.produccion(identificador, openBracket, expresion, closeBracket);
				
		 	:};

llamadaFuncion ::= IDENTIFICADOR:identificador OPEN_KEY:openKey parametros:parametros CLOSE_KEY:closeKey {:

				RESULT = LlamadaFuncion.produccion_IDENTIFICADOR_OPEN_KEY_parametros_CLOSE_KEY(identificador, openKey, parametros, closeKey);
						
			:}
			| IDENTIFICADOR:identificador OPEN_KEY:openKey CLOSE_KEY:closeKey {:
			
				RESULT = LlamadaFuncion.produccion_IDENTIFICADOR_OPEN_KEY_CLOSE_KEY(identificador, openKey, closeKey);
							
			:};

parametros ::= expresion:expresion {:

				RESULT = Parametros.produccion_expresion(expresion);

			:} 
			| expresion:expresion COLON:colon parametros:parametros {:
						
				RESULT = Parametros.produccion_expresion_COLON_parametros(expresion, colon, parametros);
				
			:};
			

//  SENTENCIAS

// Si abrimos scopes aqui, esto da demasiados conflictos por que hay 2 posibles producciones
// bloque ::= OPEN_PARENTHESIS seccionVariables listadoSentencias CLOSE_PARENTHESIS
//  	|  OPEN_PARENTHESIS listadoSentencias CLOSE_PARENTHESIS;

bloque ::= OPEN_PARENTHESIS:openParenthesis {:
			
				Bloque.preProduccion(openParenthesis);
	
			:} contenidoBloque:contenidoBloque CLOSE_PARENTHESIS:closeParenthesis {:
						
				RESULT = Bloque.produccion(openParenthesis, contenidoBloque, closeParenthesis);
				
			:};

contenidoBloque ::= seccionVariables:seccionVariables listadoSentencias:listadoSentencias {: 
	
				RESULT = ContenidoBloque.produccion_seccionVariables_listadoSentencias(seccionVariables, listadoSentencias);
	
			:} 
			| listadoSentencias:listadoSentencias {: 
	
				RESULT = ContenidoBloque.produccion_listadoSentencias(listadoSentencias);
	
			:};

listadoSentencias ::= listadoSentencias:listadoSentencias sentencia:sentencia {:
		
				RESULT = ListadoSentencias.produccion_listadoSentencias_sentencia(listadoSentencias, sentencia);
				
			:}
		 	| sentencia:sentencia {:
		
		 		RESULT = ListadoSentencias.produccion_sentencia(sentencia);
		 				 
		 	:};

sentencia ::= sentenciaDevuelve:sentenciaDevuelve {: 

				RESULT = Sentencia.produccion_sentenciaDevuelve(sentenciaDevuelve); 
				
			:}
			| sentenciaIncremento:sentenciaIncremento {: 
		
				RESULT = Sentencia.produccion_sentenciaIncremento(sentenciaIncremento); 
				
			:}
			| sentenciaAsignacion:sentenciaAsignacion {:
			
				RESULT = Sentencia.produccion_sentenciaAsignacion(sentenciaAsignacion); 
				
			:}
			| sentenciaAsignacionSuma:sentenciaAsignacionSuma {: 
				
				RESULT = Sentencia.produccion_sentenciaAsignacionSuma(sentenciaAsignacionSuma); 
				
			:}
			| sentenciaSi:sentenciaSi {: 
				
				RESULT = Sentencia.produccion_sentenciaSi(sentenciaSi); 
				
			:}
			| sentenciaAlternativas:sentenciaAlternativas {: 
			
				RESULT = Sentencia.produccion_sentenciaAlternativas(sentenciaAlternativas);
				
			:}
			| sentenciaMientras:sentenciaMientras {: 
			
				RESULT = Sentencia.produccion_sentenciaMientras(sentenciaMientras);
				
			:}
			| sentenciaLlamadaFuncion:sentenciaLlamadaFuncion {: 
			
				RESULT = Sentencia.produccion_sentenciaLlamadaFuncion(sentenciaLlamadaFuncion); 
				
			:}
			| sentenciaSalida:sentenciaSalida {: 
			
				RESULT = Sentencia.produccion_sentenciaSalida(sentenciaSalida); 
				
			:}
			| bloque:bloque {: 
			
				RESULT = Sentencia.produccion_bloque(bloque); 
				
			:};

sentenciaDevuelve ::= DEVUELVE:devuelve SEMI_COLON:semiColon {:

				RESULT = SentenciaDevuelve.produccion_DEVUELVE_SEMI_COLON(devuelve, semiColon);
			
			:}	
			| DEVUELVE:devuelve expresion:expresion SEMI_COLON:semiColon {:

				RESULT = SentenciaDevuelve.produccion_DEVUELVE_expresion_SEMI_COLON(devuelve, expresion, semiColon);
			
			:};

sentenciaIncremento ::= IDENTIFICADOR:identificador AUTO_INCREMENTO:autoIncremento SEMI_COLON:semiColon {:

				RESULT = SentenciaIncremento.produccion(identificador, autoIncremento, semiColon);

			:};

sentenciaAsignacion ::= ref:ref ASSIGN:assign expresion:expresion SEMI_COLON:semiColon {:

				RESULT = SentenciaAsignacion.produccion(ref, assign, expresion, semiColon);
		
			:};

ref ::= IDENTIFICADOR:identificador {:

				RESULT = Ref.produccion_IDENTIFICADOR(identificador);
					
			:} 
			| accesoVector:accesoVector {:

				RESULT = Ref.produccion_accesoVector(accesoVector);
				
			:};

sentenciaAsignacionSuma ::= ref:ref ASSIGN_SUMA:assignSuma expresion:expresion SEMI_COLON:semiColon {:

				RESULT = SentenciaAsignacionSuma.produccion(ref, assignSuma, expresion, semiColon);
					
			:};

sentenciaSi ::= SI:si OPEN_KEY:openKey expresion:expresion CLOSE_KEY:closeKey sentencia:sentenciaSi SINO:sino sentencia:sentenciaSino {:
					
				RESULT = SentenciaSi.produccion_SI_OPEN_KEY_expresion_CLOSE_KEY_sentencia_SINO_sentencia(si, openKey, expresion, closeKey, sentenciaSi, sino, sentenciaSino);	
					
			:}
			 | SI:si OPEN_KEY:openKey expresion:expresion CLOSE_KEY:closeKey sentencia:sentenciaSi {:
			 
				RESULT = SentenciaSi.produccion_SI_OPEN_KEY_expresion_CLOSE_KEY_sentencia(si, openKey, expresion, closeKey, sentenciaSi);	
					
			 :};
	
sentenciaAlternativas ::= ALTENATIVAS:alternativas OPEN_KEY:openKey expresion:expresion CLOSE_KEY:closeKey OPEN_PARENTHESIS:openParenthesis casosAlternativa:casosAlternativa porDefecto:porDefecto CLOSE_PARENTHESIS:closeParenthesis {:
				
				RESULT = SentenciaAlternativas.produccion(alternativas, openKey, expresion, closeKey, openParenthesis, casosAlternativa, porDefecto, closeParenthesis);
				
			:};

casosAlternativa ::= casosAlternativa:casosAlternativa casoAlt:casoAlt {:
		
				RESULT = CasosAlternativa.produccion_casosAlternativa_casoAlt(casosAlternativa, casoAlt);
		
			:}	
			| casoAlt:casoAlt {:
			
				RESULT = CasosAlternativa.produccion_casoAlt(casoAlt);
				
			:};

casoAlt ::= CASO:caso NUMERO:numero TWO_POINTS:twoPoints bloque:bloque CORTE:corte SEMI_COLON:semiColon {:
			
				RESULT = CasoAlt.produccion(caso, numero, twoPoints, bloque, corte, semiColon);
			
			:};

porDefecto ::= PORDEFECTO:pordefecto TWO_POINTS:twoPoints bloque:bloque CORTE:corte SEMI_COLON:semiColon {:
		
				RESULT = PorDefecto.produccion_PORDEFECTO_TWO_POINTS_bloque_CORTE_SEMI_COLON(pordefecto, twoPoints, bloque, corte, semiColon);
		
			:} 
			| epsilon:epsilon {:
			
				RESULT = PorDefecto.produccion_epsilon(epsilon);
				
			:}; 

sentenciaMientras ::= MIENTRAS:mientras OPEN_KEY:openKey expresion:expresion CLOSE_KEY:closeKey {:

				SentenciaMientras.preProduccion(mientras, openKey, expresion, closeKey);			
	
			:} sentencia:sentencia {:
	
				RESULT = SentenciaMientras.produccion(mientras, openKey, expresion, closeKey, sentencia);
	
			:};

sentenciaLlamadaFuncion ::= llamadaFuncion:llamadaFuncion SEMI_COLON:semiColon {:
	
				RESULT = SentenciaLlamadaFuncion.produccion(llamadaFuncion, semiColon);
				
			:};

sentenciaSalida ::= ESCRIBE:escribe OPEN_KEY:openKey opcionesEscribe:opcionesEscribe CLOSE_KEY:closeKey SEMI_COLON:semiColon {:
	
				RESULT = SentenciaSalida.produccion_ESCRIBE_OPEN_KEY_opcionesEscribe_CLOSE_KEY_SEMI_COLON(escribe, openKey, opcionesEscribe, closeKey, semiColon);
				
			:}
			| ESCRIBE_ENT:escribeEnt OPEN_KEY:openKey opcionesEscribeEnt:opcionesEscribeEnt CLOSE_KEY:closeKey SEMI_COLON:semiColon {:
	
				RESULT = SentenciaSalida.produccion_ESCRIBE_ENT_OPEN_KEY_opcionesEscribeEnt_CLOSE_KEY_SEMI_COLON(escribeEnt, openKey, opcionesEscribeEnt, closeKey, semiColon);
				
			:};
	
opcionesEscribe ::= epsilon:epsilon {:
			
				RESULT = OpcionesEscribe.produccion_epsilon(epsilon);
			
			:} 
			| STRING:string {:
			
				RESULT = OpcionesEscribe.produccion_STRING(string);
			
			:};

opcionesEscribeEnt ::= epsilon:epsilon {:
	
				RESULT = OpcionesEscribeEnt.produccion_epsilon(epsilon);
	
			:} 
			| expresion:expresion {:
	
				RESULT = OpcionesEscribeEnt.produccion_expresion(expresion);
	
			:};
